generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id             String          @id
  vendorId       String
  frameworks     String[]        @default([])
  criticality    String?
  maturity       Int?
  evidenceStatus EvidenceStatus?
  createdAt      DateTime        @default(now())
  Vendor         Vendor          @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model Evidence {
  id        String         @id
  vendorId  String
  status    EvidenceStatus @default(pending)
  url       String?
  createdAt DateTime       @default(now())
  Vendor    Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
}

model Membership {
  id             String       @id
  userId         String
  organizationId String
  role           String?
  createdAt      DateTime     @default(now())
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
}

model Organization {
  id               String          @id
  name             String          @unique
  plan             Plan            @default(free)
  seats            Int             @default(3)
  currentPeriodEnd DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  Membership       Membership[]
  PendingInvite    PendingInvite[]
  Usage            Usage[]
  Vendor           Vendor[]
}

model PendingInvite {
  id             String        @id
  email          String        @unique
  token          String        @unique
  organizationId String?
  expiresAt      DateTime
  createdAt      DateTime      @default(now())
  Organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Usage {
  id             String       @id
  organizationId String
  event          String
  count          Int          @default(0)
  createdAt      DateTime     @default(now())
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model User {
  id         String       @id
  email      String       @unique
  name       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  Membership Membership[]
  Vendor     Vendor[]
}

model Vendor {
  id             String       @id
  name           String
  slug           String       @unique
  organizationId String
  ownerId        String?
  trustScore     Int          @default(0)
  trustLevel     TrustLevel   @default(low)
  trustUpdatedAt DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Answer         Answer[]
  Evidence       Evidence[]
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User?        @relation(fields: [ownerId], references: [id])

  @@index([organizationId])
}

enum EvidenceStatus {
  pending
  approved
  rejected
}

enum Plan {
  free
  pro
  enterprise
}

enum TrustLevel {
  low
  medium
  high
}
