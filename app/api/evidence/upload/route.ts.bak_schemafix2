import prisma from "@/lib/db";

import { NextResponse } from "next/server";import type { Session } from "next-auth";
import { getServerSession } from "next-auth";
import { authOptions } from "../../../../src/lib/auth";
import { put } from "@vercel/blob"
export const runtime = "nodejs"; // required for file uploads

export async function POST(req: Request) {
  type SessionWithId = Session & { user: { id: string } }; const session = (await getServerSession(authOptions)) as SessionWithId | null;
  if (!session?.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  if (!process.env.BLOB_READ_WRITE_TOKEN) {
    return NextResponse.json({ error: "Missing BLOB_READ_WRITE_TOKEN" }, { status: 500 });
  }

  const form = await req.formData();
  const file = form.get("file") as File | null;
  const vendor = (form.get("vendor") as string | null) ?? null;
  if (!file) return NextResponse.json({ error: "No file" }, { status: 400 });

  const bytes = await file.arrayBuffer();
  const path = `evidence/${session.user.id}/${Date.now()}-${file.name}`;

  const { url } = await put(path, new Blob([bytes]), {
    access: "public",
    token: process.env.BLOB_READ_WRITE_TOKEN,
    contentType: file.type || "application/octet-stream",
  });

  // put this BEFORE the create() call
const vendorId = typeof vendor === 'string' && vendor.trim() !== '' ? vendor : undefined;

const rec = await prisma.evidence.create({
  data: {
    userId: (session.user as any).id,
    filename: file.name,
    url,
    size: typeof file.size === 'number' ? file.size : Number(file.size ?? 0),
  },
});


  return NextResponse.json({ ok: true, evidence: rec });
}







